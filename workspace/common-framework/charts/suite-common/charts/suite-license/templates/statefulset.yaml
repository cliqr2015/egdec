apiVersion: apps/v1beta2
kind: StatefulSet
metadata:
  name: {{ template "suite-license.fullname" . }}
  labels:
    app: {{ template "suite-license.name" . }}
    chart: {{ template "suite-license.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ template "suite-license.name" . }}
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ template "suite-license.name" . }}
        release: {{ .Release.Name }}
    spec:
      initContainers:
        # suite-license is dependant on jwt-keys
        - name: init-suite-jwt-keys
          image: "busybox"
          command: ['sh', '-c', 'until [ "$(wget -qO - suite-jwt-keys:8080/health)" = "{\"status\":\"UP\"}" ]; do echo waiting for myservice; sleep 2; done;']
        # Workaround to prevent all the services starts at the same time (CloudConfig -> JWT-Key -> IDM -> Password -> Auth -> ProdRegistry -> Gateway)
        - name: pem-jks-converter
{{ include "pem-jks-converter" . | indent 10 }}
          volumeMounts:
          - name: suite-license-tls
            mountPath: /cert
            readOnly: true
          - name: ca-key-pair
            mountPath: /ca
            readOnly: True
          - name: suite-license-jks
            mountPath: /jks-secrets
        - name: pg-init-client
{{ include "pg-init-client" . | indent 10 }}
      imagePullSecrets:
        - name: {{ .Values.global.imagePullSecret }}
      containers:
        - name: {{ .Chart.Name }}
          image: {{ .Values.global.registry }}/{{ .Values.global.repository}}/{{ .Values.image.repository }}:{{ .Values.image.tag }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
            - name: https
              containerPort: 8443
              protocol: TCP
          env:
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: suite-random-password
                  key: password
          volumeMounts:
            - name: trusted-store
              mountPath: {{ .Values.persistence.mountPath }}
            - name: suite-license-tls
              mountPath: {{ .Values.internalTls.mountPath }}/cert
              readOnly: true
            - name: ca-key-pair
              mountPath: {{ .Values.internalTls.mountPath }}/ca
              readOnly: true
            - name: suite-license-jks
              mountPath: /tmp/secrets
              readOnly: true
            - name: postgres-password
              mountPath: /tmp/postgresql-secret
              readOnly: true
#          livenessProbe:
#            httpGet:
#              path: /
#              port: http
#          readinessProbe:
#            httpGet:
#              path: /
#              port: http
          resources:
{{ toYaml .Values.resources | indent 12 }}
    {{- with .Values.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}
      volumes:
      - name: suite-license-tls
        secret:
          secretName: suite-license-tls
          items:
            - key: tls.crt
              path: certificate.pem
            - key: tls.key
              path: private_key.pem
      - name: ca-key-pair
        secret:
          secretName: ca-key-pair
          items:
          - key: tls.crt
            path: ca_certificate.pem
      - name: trusted-store
      {{- if .Values.persistence.enabled }}
        persistentVolumeClaim:
          claimName: {{ .Values.persistence.existingClaim | default (include "suite-license.fullname" .) }}
      {{- else }}
        emptyDir: {}
      {{- end }}
      - name: suite-license-jks
        emptyDir: {}
      - name: postgres-password
        secret:
          secretName: suite-random-password
          items:
          - key: password
            path: postgres-password
